(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.rollADie = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

function verifyParams(options) {
  var numberDice = options.numberDice,
      callback = options.callback,
      element = options.element;

  if (!element) throw 'Element to render dice animation not specified!';
  if (!numberDice) throw 'Number of dice to use not specified';
  if (!callback) throw 'Provide a callback function to recieve dice values';
}

function playSound(outerContainer) {
  var played = void 0;
  var audio = document.createElement('audio');
  outerContainer.appendChild(audio);
  audio.src = '../dist/nc93322.mp3';
  played = true;
  audio.play();
}

function getFace(pips) {
  var XMLNS = "http://www.w3.org/2000/svg";
  var svg = document.createElementNS(XMLNS, 'svg');
  svg.setAttribute('class', 'dice-face');
  svg.setAttribute('width', 32);
  svg.setAttribute('height', 32);

  pips.map(function (pip) {
    var circle = document.createElementNS(XMLNS, 'circle');
    Object.keys(pip).forEach(function (key) {
      return circle.setAttribute(key, pip[key]);
    });
    return circle;
  }).forEach(function (circle) {
    return svg.appendChild(circle);
  });

  return svg;
};

function appendDieContainers(dieId, element, angle) {
  var outer = document.createElement('div');
  outer.className = 'dice-outer';
  outer.id = dieId;
  element.appendChild(outer);

  var dice = document.createElement('div');
  dice.className = 'dice';
  dice.style.transform = 'rotateX(' + angle[0] + 'deg) rotateZ(' + angle[1] + 'deg)';
  outer.appendChild(dice);
  return dice;
}

function removeDieFromDOM(dieId) {
  var removeElement = document.getElementById(dieId);
  removeElement.remove();
}

var rollADie = function rollADie(options) {
  var numberDice = options.numberDice,
      callback = options.callback,
      element = options.element;

  verifyParams(options);
  var faces = 6;
  var result = [];
  playSound(element);

  var _loop = function _loop(i) {
    var dieFace = Math.floor(Math.random() * 6) + 1;
    result.push(dieFace);
    var angle = {
      1: [90, 0],
      2: [0, 90],
      3: [180, 0],
      4: [0, 0],
      5: [0, -90],
      6: [-90, 0]
    }[dieFace];
    var dieId = i + '-' + dieFace;
    var dice = appendDieContainers(dieId, element, angle);
    [[{ cx: 16, cy: 16, r: 6, fill: 'red' }], [{ cx: 8, cy: 8, r: 3 }, { cx: 24, cy: 24, r: 3 }], [{ cx: 8, cy: 8, r: 3 }, { cx: 16, cy: 16, r: 3 }, { cx: 24, cy: 24, r: 3 }], [{ cx: 8, cy: 8, r: 3 }, { cx: 24, cy: 24, r: 3 }, { cx: 8, cy: 24, r: 3 }, { cx: 24, cy: 8, r: 3 }], [{ cx: 8, cy: 8, r: 3 }, { cx: 16, cy: 16, r: 3 }, { cx: 24, cy: 24, r: 3 }, { cx: 8, cy: 24, r: 3 }, { cx: 24, cy: 8, r: 3 }], [{ cx: 8, cy: 8, r: 3 }, { cx: 24, cy: 24, r: 3 }, { cx: 8, cy: 16, r: 3 }, { cx: 24, cy: 16, r: 3 }, { cx: 8, cy: 24, r: 3 }, { cx: 24, cy: 8, r: 3 }]].map(getFace).forEach(function (face) {
      return dice.appendChild(face);
    });
    //Todo: Remove existing dice elements before appending new ones. In cases where user calls rollDice in quick succesion
    setTimeout(function () {
      return removeDieFromDOM(dieId);
    }, 3000);
  };

  for (var i = 0; i < numberDice; i++) {
    _loop(i);
  }
  if (callback) {
    callback(result);
  }
};

module.exports = rollADie;

},{}]},{},[1])(1)
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
